--[[

	WARNING: THIS IS A BETA BUILD, EXPECT JANK

]]

--[[
	Locales
]]

local table = table.Copy(table)

local debug = table.Copy(debug)
local pairs = pairs
local type = type

local function tCopy(n, t)
	if not n then
		return nil
	end
	
	local c = {}
	
	debug.setmetatable(c, debug.getmetatable(n))
	
	for k, v in pairs(n) do
		if type(v) ~= "table" then
			c[k] = v
		else
			t = t or {}
			t[n] = c
			
			if t[v] then
				c[k] = t[v]
			else
				c[k] = tCopy(v, t)
			end
		end
	end
	
	return c
end

local cam = tCopy(cam)
local Color = Color
local concommand = tCopy(concommand)
local cvars = tCopy(cvars)
local draw = tCopy(draw)
local engine = tCopy(engine)
local ents = tCopy(ents)
local file = tCopy(file)
local game = game
local GetConVar = GetConVar
local GetConVarNumber = GetConVarNumber
local GetConVarString = GetConVarString
local GetConVar_Internal = GetConVar_Internal
local gui = tCopy(gui)
local hook = tCopy(hook)
local HSVToColor = HSVToColor
local http = tCopy(http)
local ipairs = ipairs
local IsConCommandBlocked = IsConCommandBlocked
local IsValid = IsValid
local jit = tCopy(jit)
local LocalPlayer = LocalPlayer
local Material = Material
local math = tCopy(math)
local MsgC = MsgC
local player = tCopy(player)
local render = tCopy(render)
local RunConsoleCommand = RunConsoleCommand
local ScrW = ScrW
local string = tCopy(string)
local surface = tCopy(surface)
local timer = tCopy(timer)
local tobool = tobool
local tonumber = tonumber
local tostring = tostring
local UnPredictedCurTime = UnPredictedCurTime
local util = tCopy(util)
local Vector = Vector
local vgui = tCopy(vgui)

local meta_an = debug.getregistry()["Angle"]
local meta_cd = debug.getregistry()["CUserCmd"]
local meta_cv = debug.getregistry()["ConVar"]
local meta_en = debug.getregistry()["Entity"]
local meta_im = debug.getregistry()["IMaterial"]
local meta_pl = debug.getregistry()["Player"]
local meta_vc = debug.getregistry()["Vector"]
local meta_vm = debug.getregistry()["VMatrix"]
local meta_wn = debug.getregistry()["Weapon"]

local IN_BACK = 16
local IN_FORWARD = 8
local IN_MOVELEFT = 512
local IN_MOVERIGHT = 1024
local IN_RELOAD = 8192
local IN_SPEED = 131072
local MASK_SHOT = 1174421507
local MATERIAL_FOG_NONE = 0
local MOVETYPE_LADDER = 9
local MOVETYPE_NOCLIP = 8
local MOVETYPE_OBSERVER = 10
local PLAYERANIMEVENT_ATTACK_PRIMARY = 0

local beammat = Material("cable/redlaser")
local trmat = Material("vgui/ttt/sprite_traitor")
meta_im.SetInt(beammat, "$flags", bit.bor(meta_im.GetInt(beammat, "$flags"), 32768))

file.Write("catpng.png", util.Base64Decode(""))

local catpng = Material("../data/catpng.png") or nil

if catpng then
	meta_im.SetInt(catpng, "$flags", bit.bor(meta_im.GetInt(catpng, "$flags"), 32768))
end

math.randomseed(math.random(-123456, 123456))

-- Meth stuff

local ismeth = false
local mapi, mrend, mutil, mcall, mvar

if meth_lua_api then
	mapi = meth_lua_api
	ismeth = true

	if mapi.render then
		mrend = mapi.render
	end

	if mapi.util then
		mutil = mapi.util
	end
	
	if mapi.callbacks then
		mcall = mapi.callbacks
	end
	
	if mutil.GetPermissions().CheatSettings and mapi.var then
		mvar = mapi.var
	end
end

--[[
	Varzzzzz
]]

local bullets = {}

local vars = {
	-- Cunt
	["hookname"] = string.char(math.random(97, 122)) .. tostring(math.random(-123456, 123456)),
	["timer_fast"] = string.char(math.random(97, 122)) .. tostring(math.random(-123456, 123456)),
	["timer_slow"] = string.char(math.random(97, 122)) .. tostring(math.random(-123456, 123456)),

	-- Render
	["afov"] = 75,
	["antiblind"] = false,
	["beamtracers"] = false,
	["catpng"] = false,
	["catpng_a"] = 100,
	["catpng_b"] = 255,
	["catpng_g"] = 255,
	["catpng_r"] = 255,
	["cfov"] = meta_cv.GetInt(GetConVar("fov_desired")),
	["contextmenuvisible"] = false,
	["fog"] = true,
	["fullbright"] = false,
	["maxtracers"] = 1000,
	["reddeath"] = true,
	["renderpanic"] = false,
	["rgb"] = false,
	["silentviz"] = false,
	["spawnmenuvisible"] = false,
	["thirdpersonfix"] = false,
	["tracerlife"] = 3,
	["tracers_local"] = false,
	["tracers_other"] = false,

	-- Tools
	["antigag"] = false,
	["followang"] = Angle(0, 0, 0),
	["followbot"] = false,
	["following"] = false,
	["followtarg"] = LocalPlayer(),
	["gesture"] = "dance",
	["gesture_loop"] = false,
	["gopen"] = true,
	["psays"] = false,
	["psays_message"] = "message",
	["specdetector"] = false,
	["specdetector_all"] = false,
	["specdetector_x"] = 20 + ScrW() * (375 / 1920),
	["specdetector_y"] = 10,
	["spectators"] = {},
	["tcache"] = {},
	["tdetector"] = false,
	["tdetector_icons"] = true,
	["tdetector_list"] = true,
	["tdetector_list_x"] = 10,
	["tdetector_list_y"] = 10,
	["ttable"] = {},
	
	-- Thing
	["alerts"] = true,
	["alerts_sound"] = true,
}

local concommands = {
	["integer"] = {
		-- Render
		["st_render_catpng_alpha"] = "catpng_a",
		["st_render_catpng_blue"] = "catpng_b",
		["st_render_catpng_green"] = "catpng_g",
		["st_render_catpng_red"] = "catpng_r",
		["st_render_fov_set"] = "cfov",
		["st_render_tracers_life_set"] = "tracerlife",
		["st_render_tracers_max_set"] = "maxtracers",

		-- Tools
		["st_tools_spectatorlist_x"] = "specdetector_x",
		["st_tools_spectatorlist_y"] = "specdetector_y",
		["st_tools_tdetector_list_x"] = "tdetector_list_x",
		["st_tools_tdetector_list_y"] = "tdetector_list_y",
	},

	["string"] = {
		-- Render

		-- Tools
		["st_tools_gesture_set"] = "gesture",
		["st_tools_psay_spam_set"] = "psays_message"
	},

	["boolean"] = {
		-- Render
		["st_render_antiblind"] = "antiblind",
		["st_render_catpng"] = "catpng",
		["st_render_fixthirdperson"] = "thirdpersonfix",
		["st_render_fog"] = "fog",
		["st_render_fullbright"] = "fullbright",
		["st_render_rgb"] = "rgb",
		["st_render_tracers_beam"] = "beamtracers",
		["st_render_tracers_local"] = "tracers_local",
		["st_render_tracers_other"] = "tracers_other",
		["st_render_visualize_silent"] = "silentviz",

		-- Tools
		["st_tools_allow_guiopenurl"] = "gopen",
		["st_tools_antigag"] = "antigag",
		["st_tools_followbot"] = "followbot",
		["st_tools_gesture_loop"] = "gesture_loop",
		["st_tools_psay_spam"] = "psays",
		["st_tools_spectatorlist"] = "specdetector",
		["st_tools_spectatorlist_showall"] = "specdetector_all",
		["st_tools_tdetector"] = "tdetector",
		["st_tools_tdetector_drawicons"] = "tdetector_icons",
		["st_tools_tdetector_drawlist"] = "tdetector_list",
		
		-- Thing
		["st_alerts"] = "alerts",
		["st_alerts_sound"] = "alerts_sound",
	}
}

local addedCommands = {}

-- nonozone

local badCommands = {
	"+back",
	"+forward",
	"+jump",
	"+left",
	"+moveleft",
	"+right",
	"+voicerecord",
	"+zoom",
	"-back",
	"-forward",
	"-jump",
	"-left",
	"-moveleft",
	"-right",
	"-voicerecord",
	"-zoom",
	"bind",
	"bind_mac",
	"bindtoggle",
	"cl_chatfilters",
	"cl_interp",
	"cl_interp_all",
	"cl_interp_npcs",
	"cl_interp_ratio",
	"cl_yawspeed",
	"connect",
	"demos",
	"disconnect",
	"engine_no_focus_sleep",
	"exit",
	"fps_max",
	"impulse",
	"jpeg",
	"kill",
	"mat_texture_limit",
	"net_graph",
	"net_graphheight",
	"net_graphmsecs",
	"net_graphpos",
	"net_graphproportionalfont",
	"net_graphshowinterp",
	"net_graphshowlatency",
	"net_graphsolid",
	"net_graphtext",
	"open",
	"pp_bloom",
	"pp_bokeh",
	"pp_dof",
	"pp_motionblur",
	"pp_stereoscopy",
	"pp_texturize",
	"pp_texturize_scale",
	"pp_toytown",
	"quit",
	"rate",
	"record",
	"retry",
	"say",
	"screenshot",
	"startmovie",
}

local badWeapons = {
	"bomb",
	"bugbait",
	"c4",
	"camera",
	"climb",
	"crowbar",
	"fist",
	"frag",
	"gmod_tool",
	"gravity gun",
	"grenade",
	"hand",
	"ied",
	"knife",
	"medkit",
	"physcannon",
	"physgun",
	"physics gun",
	"slam",
	"stunstick",
	"sword",
}

local tWeapons = {
	"(Disguise)",
	"spiderman's_swep",
	"weapon_awp",
	"weapon_jihadbomb",
	"weapon_ttt_awp",
	"weapon_ttt_c4",
	"weapon_ttt_death_station",
	"weapon_ttt_decoy",
	"weapon_ttt_dhook",
	"weapon_ttt_flaregun",
	"weapon_ttt_knife",
	"weapon_ttt_phammer",
	"weapon_ttt_push",
	"weapon_ttt_radio",
	"weapon_ttt_sg552",
	"weapon_ttt_silencedsniper",
	"weapon_ttt_sipistol",
	"weapon_ttt_teleport",
	"weapon_ttt_trait_defilibrator",
	"weapon_ttt_tripmine",
	"weapon_ttt_turtlenade",
	"weapon_ttt_xbow",
}

--[[
	Fuccncs
]]

local function alert(event, data)
	if not vars["alerts"] then
		return
	end

	if not event then
		event = ""
	end

	if not data then
		data = ""
	end

	if mrend then
		mrend.PushAlert("Blocked " .. tostring(event) .. "(" .. tostring(data) .. ")")
	else
		if vars["alerts_sound"] then
			surface.PlaySound("garrysmod/balloon_pop_cute.wav")
		end

		MsgC(Color(255, 100, 100), "[$W467001Z_8374] ", Color(222, 222, 222), "Blocked ", Color(255, 100, 100), tostring(event) .. "(" .. tostring(data) .. ")", Color(222, 222, 222), "\n")
	end
end

local function isBadWeapon(weapon)
	if not weapon or not meta_en.IsValid(weapon) then
		return true
	end

	local class = meta_en.GetClass(weapon)
	local pname = meta_wn.GetPrintName(weapon)
	
	if class then
		class = string.lower(class)
	end
	
	if pname then
		pname = string.lower(pname)
	end

	for _, v in ipairs(badWeapons) do
		if string.find(class, v) or string.find(pname, v) then
			return true
		end
	end

	return false
end

local function vEnt(ent)
	if not ent then
		return false
	end

	if meta_pl.IsPlayer(ent) then
		return meta_en.IsValid(ent) and meta_pl.Alive(ent) and meta_pl.GetObserverMode(ent) == 0 and meta_pl.Team(ent) ~= 1002 and meta_en.GetColor(ent).a > 0
	end
	
	return meta_en.IsValid(ent)
end

local function getClosest()
	local d = math.huge
	local cur = nil

	for _, v in ipairs(player.GetAll()) do
		if v == LocalPlayer() or not vEnt(v) or meta_en.IsDormant(v) then
			continue
		end

		local dist = meta_vc.Distance(meta_en.GetPos(v), meta_en.GetPos(LocalPlayer()))

		if dist < d then
			d = dist
			cur = v
		end
	end

	return cur
end

local function shouldPanic()
	return ismeth and vars["renderpanic"]
end

local function canRender()
	local mesp = true
	
	if ismeth and mvar then
		mesp = mvar.GetVarInt("ESP..Enabled") % 256 == 1 and mvar.GetVarInt("Player.Third Person.Third Person") ~= 1
	end

	return mesp and not vgui.CursorVisible() and not gui.IsConsoleVisible() and not gui.IsGameUIVisible() and not meta_pl.IsTyping(LocalPlayer()) and not vars["spawnmenuvisible"] and not vars["contextmenuvisible"]
end

local function shrtxt(text, maxw)
	surface.SetFont("BudgetLabel")
	
	local md = false
	local tw, th = surface.GetTextSize(text)
	
	while tw + 5 > maxw do
		md = true
	
		text = string.sub(text, 1, string.len(text) - 1)
	
		tw, th = surface.GetTextSize(text .. "...")
	end
	
	if md then
		text = text .. "..."
	end
	
	return text
end

local function drawTraitorDetector()
	if shouldPanic() then
		return
	end

	if engine.ActiveGamemode() == "terrortown" then
		draw.NoTexture()
		surface.SetFont("BudgetLabel")
	
		local x, y, w, h = vars["tdetector_list_x"], vars["tdetector_list_y"], ScrW() * (375 / 1920), 20
		local ofs = 1
		local dw = w - (w / 3)
		
		if vars["tdetector_list"] then
			surface.SetDrawColor(55, 55, 55, 255)
			surface.DrawRect(x, y, w, h)
			
			surface.SetDrawColor(12, 12, 12, 255)
			surface.DrawOutlinedRect(x, y, w, h)
			surface.SetDrawColor(12, 255, 12, 255)
			
			local tw, th = surface.GetTextSize("Player")
			
			surface.SetTextPos(x + (w - dw) - (tw / 2), y + 3)
			surface.SetTextColor(255, 255, 255, 255)
			surface.DrawText("Player")
			
			tw, th = surface.GetTextSize("Role")
			
			surface.SetTextPos(x + (w - (w / 6)) - (tw / 2), y + 3)
			surface.DrawText("Role")
		end
	
		for _, v in ipairs(vars["ttable"]) do
			if shouldPanic() then
				return
			end
		
			local ply = v[1]
			local has = table.HasValue(vars["tcache"], ply)
			
			if not IsValid(ply) or not meta_en.IsValid(ply) then
				continue
			end

			if vars["tdetector_list"] then
				local offsety = y + (ofs * 20)
				
				if offsety > ScrH() then
					continue
				end
				
				local mode = v[2]
				local role = "Unknown"
				
				if mode == 0 and not has then
					if meta_pl.IsTraitor and meta_pl.IsTraitor(LocalPlayer()) then
						role = "Innocent"
						surface.SetDrawColor(0, 200, 0, 150)
					else
						surface.SetDrawColor(24, 24, 24, 150)
					end
				elseif mode == 1 and not has then
					surface.SetDrawColor(0, 0, 200, 150)
					role = "Detective"
				elseif mode == 2 or has then
					surface.SetDrawColor(200, 0, 0, 150)
					role = "Traitor"
				else
					surface.SetDrawColor(24, 24, 24, 150)
					role = "ERROR"
				end
				
				role = shrtxt(role, w - dw)
				
				surface.DrawRect(x, offsety, w, h)
				
				local n = shrtxt(meta_pl.GetName(ply), dw)
				local md = false
				
				local tw, th = surface.GetTextSize(n)
				
				surface.SetTextColor(255, 255, 255, 255)
				surface.SetTextPos(x + (w - dw) - (tw / 2), offsety + 3)
				surface.DrawText(n)
				
				tw, th = surface.GetTextSize(role)
				
				surface.SetTextPos(x + (w - (w / 6)) - (tw / 2), offsety + 3)
				surface.DrawText(role)
				
				surface.SetDrawColor(12, 12, 12, 255)
				surface.DrawLine(x, offsety - 1 + h, x + w, offsety - 1 + h)
				
				ofs = ofs + 1
			end
			
			if (meta_pl.IsTraitor and meta_pl.IsTraitor(LocalPlayer())) or meta_en.IsDormant(ply) or not meta_pl.Alive(ply) or meta_en.GetColor(ply).a < 1 then
				continue
			end
			
			cam.Start3D()
				if vars["tdetector_icons"] and has then
					local dir = meta_en.GetForward(LocalPlayer()) * -1
					local rpos = meta_en.LocalToWorld(ply, (meta_en.OBBCenter(ply) * 2) + Vector(0, 0, 2))
					
					render.SetMaterial(trmat)
					render.DrawQuadEasy(rpos, dir, 8,  8, Color(255, 255, 255, 130), 180)
				end
			cam.End3D()
		end
		
		if vars["tdetector_list"] then
			surface.SetDrawColor(12, 12, 12, 255)
			surface.DrawOutlinedRect(x, y, w, h + ((ofs - 1) * 20))
			surface.DrawLine(x + (w - (w / 3)), y, x + (w - (w / 3)), y + h + ((ofs - 1) * 20))
		end
	end
end

local function drawSpectators()
	if shouldPanic() then
		return
	end

	draw.NoTexture()
	surface.SetFont("BudgetLabel")
	
	local x, y, w, h = vars["specdetector_x"], vars["specdetector_y"], ScrW() * (500 / 1920), 20
	local ofs = 1
	
	local fw = w - (w / 8)
	local nw = w - (w / 2)
	
	local dw = w - (w / 4)
	
	surface.SetDrawColor(55, 55, 55, 255)
	surface.DrawRect(x, y, w, h)
	
	surface.SetDrawColor(12, 12, 12, 255)
	surface.DrawOutlinedRect(x, y, w, h)
	surface.SetDrawColor(12, 255, 12, 255)
	
	local tw, th = surface.GetTextSize("Spectator")
	
	surface.SetTextPos(x + (w - dw) - (tw / 2), y + 3)
	surface.SetTextColor(255, 255, 255, 255)
	surface.DrawText("Spectator")
	
	tw, th = surface.GetTextSize("OBS-Mode")
	
	surface.SetTextPos(x + fw - (tw / 2), y + 3)
	surface.DrawText("OBS-Mode")
	
	tw, th = surface.GetTextSize("Target")
	
	surface.SetTextPos(x + (w - (dw / 2)) - (tw / 2), y + 3)
	surface.DrawText("Target")

	for _, v in ipairs(vars["spectators"]) do
		if shouldPanic() then
			return
		end
	
		if not meta_en.IsValid(v) then
			continue
		end
		
		local offsety = y + (ofs * 20)
				
		if offsety > ScrH() then
			continue
		end
		
		local starg = meta_pl.GetObserverTarget(v) or nil
		
		if vars["specdetector_all"] then
			if starg and meta_en.IsValid(starg) and starg == LocalPlayer() then
				surface.SetDrawColor(200, 0, 0, 150)
			else
				surface.SetDrawColor(24, 24, 24, 150)
			end
		else
			surface.SetDrawColor(24, 24, 24, 150)
		end
		
		surface.DrawRect(x, offsety, w, h)
		
		local n = shrtxt(meta_pl.GetName(v), w - nw)
		tw, th = surface.GetTextSize(n)

		surface.SetTextPos(x + (w - dw) - (tw / 2), offsety + 3)
		surface.DrawText(n)
		
		local sname = "UNKNOWN"
		
		if starg and meta_en.IsValid(starg) then
			if starg == LocalPlayer() then
				sname = shrtxt("LocalPlayer", w - dw)
			else
				sname = shrtxt(meta_pl.GetName(starg), w - dw)
			end
		end
		
		tw, th = surface.GetTextSize(sname)

		surface.SetTextPos(x + (w - (dw / 2)) - (tw / 2), offsety + 3)
		surface.DrawText(sname)
		
		local mode = meta_pl.GetObserverMode(v) or -1
	
		if mode == 1 then
			mode = "Deathcam"
		elseif mode == 2 then
			mode = "Freezecam"
		elseif mode == 3 then
			mode = "Fixed"
		elseif mode == 4 then
			mode = "Firstperson"
		elseif mode == 5 then
			mode = "Thirdperson"
		elseif mode == 6 then
			mode = "Roaming"
		else
			mode = "UNKNOWN"
		end
		
		mode = shrtxt(mode, w - dw)
		
		tw, th = surface.GetTextSize(mode)
		
		surface.SetTextPos(x + fw - (tw / 2), offsety + 3)
		surface.DrawText(mode)
		
		surface.SetDrawColor(12, 12, 12, 255)
		surface.DrawLine(x, offsety - 1 + h, x + w, offsety - 1 + h)
		
		ofs = ofs + 1
	end
	
	surface.SetDrawColor(12, 12, 12, 255)
	surface.DrawOutlinedRect(x, y, w, h + ((ofs - 1) * 20))
	surface.DrawLine(x + nw, y, x + nw, y + h + ((ofs - 1) * 20))
	surface.DrawLine(x + dw, y, x + dw, y + h + ((ofs - 1) * 20))
end

--[[
	Deeztourz (funy)
]]

local safefuncs = {
	cb = meta_cd.ClearButtons,
	cm = meta_cd.ClearMovement,
	sva = meta_cd.SetViewAngles,

	cremove = concommand.Remove,
	ctable = concommand.GetTable,
	cvs_acb = cvars.AddChangeCallback,
	cvs_bool = cvars.Bool,
	cvs_gcvcb = cvars.GetConVarCallbacks,
	cvs_number = cvars.Number,
	cvs_rcb = cvars.RemoveChangeCallack,
	cvs_string = cvars.String,
	gcv = GetConVar,
	gcvn = GetConVarNumber,
	gcvs = GetConVarString,
	gcv_i = GetConVar_Internal,
	gopen = gui.OpenURL,
	hadd = hook.Add,
	hrm = hook.Remove,
	htable = hook.GetTable,
	isccb = IsConCommandBlocked,
	msgc = MsgC,
	pcon = meta_pl.ConCommand,
	rcon = RunConsoleCommand,
	rtts = render.DrawTextureToScreen,
	tempty = table.Empty,
	texists = timer.Exists,
}

meta_cd.ClearButtons = function(...)
	if not ... then
		return
	end

	if string.find(string.lower(debug.getinfo(2).short_src), "taunt_camera") then
		return
	end

	return safefuncs.cb(...)
end

meta_cd.ClearMovement = function(...)
	if not ... then
		return
	end

	if string.find(string.lower(debug.getinfo(2).short_src), "taunt_camera") then
		return
	end

	return safefuncs.cm(...)
end

meta_cd.SetViewAngles = function(...)
	if not ... then
		return
	end

	if string.find(string.lower(debug.getinfo(2).short_src), "taunt_camera") then
		return
	end

	return safefuncs.sva(...)
end

_G.render.DrawTextureToScreen = function(...)
	if not ... or vars["antiblind"] then
		return
	end
	
	return safefuncs.rtts(...)
end

_G.cvars.AddChangeCallback = function(var, ...)
	if not var or type(var) ~= "string" or not ... then
		return
	end

	for _, v in ipairs(addedCommands) do
		if string.find(var, v) then
			alert("cvars.AddChangeCallback", var)

			return
		end
	end

	return safefuncs.cvs_acb(var, ...)
end

_G.cvars.Bool = function(var, def)
	if not def or type(def) ~= "boolean" then
		def = false
	end

	if not var or type(var) ~= "string" then
		return def
	end
	
	for _, v in ipairs(addedCommands) do
		if string.find(var, v) then
			alert("cvars.Bool", var)

			return
		end
	end

	return safefuncs.cvs_bool(var, def)
end

_G.cvars.GetConVarCallbacks = function(var, cinf)
	if not cinf or type(cinf) ~= "boolean" then
		cinf = false
	end
	
	if not var or type(var) ~= "string" then
		return
	end
	
	for _, v in ipairs(addedCommands) do
		if string.find(var, v) then
			alert("cvars.GetConVarCallbacks", var)

			return
		end
	end
	
	return safefuncs.cvs_gcvcb(var, cinf)
end

_G.cvars.Number = function(var, def)
	if not def then
		def = nil
	end

	if not var or type(var) ~= "string" then
		return def
	end
	
	for _, v in ipairs(addedCommands) do
		if string.find(var, v) then
			alert("cvars.Number", var)

			return
		end
	end

	return safefuncs.cvs_number(var, def)
end

_G.cvars.RemoveChangeCallack = function(var, cb)
	if not var or type(var) ~= "string" or not cb then
		return
	end
	
	for _, v in ipairs(addedCommands) do
		if string.find(var, v) then
			alert("cvars.RemoveChangeCallack", var)

			return
		end
	end

	return safefuncs.cvs_rcb(var, cb)
end

_G.cvars.String = function(var, def)
	if not def then
		def = nil
	end

	if not var or type(var) ~= "string" then
		return def
	end
	
	for _, v in ipairs(addedCommands) do
		if string.find(var, v) then
			alert("cvars.String", var)

			return
		end
	end

	return safefuncs.cvs_string(var, def)
end

_G.GetConVar = function(var)
	if not var or type(var) ~= "string" then
		return
	end

	for _, v in ipairs(addedCommands) do
		if string.find(var, v) then
			alert("GetConVar", var)

			return
		end
	end

	return safefuncs.gcv(var)
end

_G.GetConVar_Internal = function(var)
	if not var or type(var) ~= "string" then
		return
	end

	for _, v in ipairs(addedCommands) do
		if string.find(var, v) then
			alert("GetConVar_Internal", var)

			return
		end
	end

	return safefuncs.gcv_i(var)
end

_G.GetConVarNumber = function(var)
	if not var or type(var) ~= "string" then
		return
	end

	for _, v in ipairs(addedCommands) do
		if string.find(var, v) then
			alert("GetConVarNumber", var)

			return
		end
	end

	return safefuncs.gcvn(var)
end

_G.GetConVarString = function(var)
	if not var or type(var) ~= "string" then
		return
	end

	for _, v in ipairs(addedCommands) do
		if string.find(var, v) then
			alert("GetConVarString", var)

			return
		end
	end

	return safefuncs.gcvs(var)
end

_G.concommand.GetTable = function(...)
	local nt, ac = safefuncs.ctable()

	for k, _ in pairs(nt) do
		if table.HasValue(addedCommands, k) then
			nt[k] = nil
		end
	end

	alert("concommand.GetTable")

	return nt, ac
end

_G.concommand.Remove = function(var)
	if not var or type(var) ~= "string" then
		return
	end

	for _, v in ipairs(addedCommands) do
		if string.find(var, v) then
			alert("concommand.Remove", var)

			return
		end
	end

	return safefuncs.cremove(var)
end

_G.IsConCommandBlocked = function(var)
	if not var or type(var) ~= "string" then
		return false
	end

	for _, v in ipairs(addedCommands) do
		if string.find(var, v) then
			alert("IsConCommandBlocked", var)

			return false
		end
	end

	return safefuncs.isccb(var)
end

_G.hook.GetTable = function(...)
	local nt = safefuncs.htable()

	for h, ht in pairs(nt) do
		if type(ht) == "table" then
			for k, _ in pairs(ht) do
				if k == vars["hookname"] then
					ht[k] = nil
				end
			end

			if table.Count(ht) == 0 then
				nt[h] = nil
			end
		end
	end

	alert("hook.GetTable")

	return nt
end

_G.hook.Remove = function(class, name)
	if not class or not name or not type(class) == "string" or not type(name) == "string" or name == vars["hookname"] then
		return
	end
	
	return safefuncs.hrm(class, name)
end

_G.hook.Add = function(class, name, func)
	if not class or not name or not func or not type(class) == "string" or not type(name) == "string" or not type(func) == "function" or name == vars["hookname"] then
		return
	end
	
	return safefuncs.hadd(class, name, func)
end

_G.table.Empty = function(tbl)
	if not tbl or type(tbl) ~= "table" then
		return
	end

	if tbl == _G then
		alert("table.Empty", "_G")

		return
	end

	return safefuncs.tempty(tbl)
end

_G.gui.OpenURL = function(url)
	if not url or type(url) ~= "string" then
		return
	end

	if not vars["gopen"] then
		alert("gui.OpenURL", "\"" .. url .. "\"")

		return
	end

	return safefuncs.gopen(url)
end

_G.timer.Exists = function(n)
	if not n or type(n) ~= "string" then
		return false
	end

	if n == vars["timer_fast"] or n == vars["timer_slow"] then
		alert("timer.Exists", n)
		
		return false
	end

	return safefuncs.texists(n)
end

_G.RunConsoleCommand = function(cmd, ...)
	if not cmd or type(cmd) ~= "string" then
		return
	end

	local conc = ""

	if ... then
		conc = " " .. ...
	end

	for _, v in ipairs(badCommands) do
		if string.find(cmd, v) then
			alert("RunConsoleCommand", "\"" .. cmd .. conc .. "\"")

			return
		end
	end

	for _, v in ipairs(addedCommands) do
		if string.find(cmd, v) then
			alert("RunConsoleCommand", "\"" .. cmd .. conc .. "\"")

			return
		end
	end

	return safefuncs.rcon(cmd, ...)
end

meta_pl.ConCommand = function(cmd)
	if not cmd or type(cmd) ~= "string" then
		return
	end

	for _, v in ipairs(badCommands) do
		if string.find(cmd, v) then
			alert("LocalPlayer():ConCommand", "\"" .. cmd .. "\"")

			return
		end
	end

	for _, v in ipairs(addedCommands) do
		if string.find(cmd, v) then
			alert("LocalPlayer():ConCommand", "\"" .. cmd .. "\"")

			return
		end
	end

	return safefuncs.pcon(cmd)
end

--[[
	The Hooks!!
]]

if ismeth and mcall then
	mcall.Add("OnHUDPaint", vars["hookname"], function()
		vars["renderpanic"] = false
	
		if canRender() then
			draw.NoTexture()
			surface.SetFont("BudgetLabel")
			
			if vars["tdetector"] then
				drawTraitorDetector()
			end
			
			if vars["specdetector"] then
				drawSpectators()
			end

			if vars["tracers_other"] or vars["tracers_local"] then
				for k, v in ipairs(bullets) do
					if not k or not v or vars["renderpanic"] then
						continue
					end
			
					cam.Start3D()
						if vars["beamtracers"] then
							render.SetMaterial(beammat)
							render.DrawBeam(bullets[k].s, bullets[k].e, 4, 1, 1, Color(255, 255, 255, 255))
						else
							render.DrawLine(bullets[k].s, bullets[k].e, bullets[k].c, true)
						end
					cam.End3D()
				end
			end
		
			if vars["followbot"] then
				local tply = vars["followtarg"]
			
				if tply ~= LocalPlayer() and IsValid(tply) then
					local text = "Following: " .. meta_pl.GetName(tply)
					
					local tw, th = surface.GetTextSize(text)
					
					surface.SetTextColor(255, 255, 255, 255)
					surface.SetTextPos((ScrW() / 2) - (tw / 2), 15)
					surface.DrawText(text)
				end
			end
			
			if vars["catpng"] and catpng and not meta_im.IsError(catpng) and mvar then
				local fov = mvar.GetVarInt("Aimbot.Target.FoV") or nil
				
				if fov and fov > 0 and fov <= 60 then
					local retardednumber = 2.6
					local rad = (math.tan(math.rad(fov)) / math.tan(math.rad(vars["afov"] / 2)) * ScrW()) / retardednumber
					local size = rad * 1.955
					
					surface.SetDrawColor(vars["catpng_r"] % 256, vars["catpng_g"] % 256, vars["catpng_b"] % 256, vars["catpng_a"] % 256)
					surface.SetMaterial(catpng)
					
					surface.DrawTexturedRect((ScrW() / 2) - (size / 2), (ScrH() / 2) - (size / 2), size + retardednumber, size + retardednumber)
				end
			end
		end
	end)
end

hook.Add("OnSpawnMenuOpen", vars["hookname"], function()
	vars["spawnmenuvisible"] = true
end)

hook.Add("OnSpawnMenuClose", vars["hookname"], function()
	vars["spawnmenuvisible"] = false
end)

hook.Add("OnContextMenuOpen", vars["hookname"], function()
	vars["contextmenuvisible"] = true
end)

hook.Add("OnContextMenuClose", vars["hookname"], function()
	vars["contextmenuvisible"] = false
end)


hook.Add("HUDPaint", vars["hookname"], function()
	vars["renderpanic"] = true

	if not ismeth then
		if vars["tdetector"] then
			drawTraitorDetector()
		end
		
		if vars["specdetector"] then
			drawSpectators()
		end
	end
	
	if vars["antiblind"] then
		hook.Remove("HUDPaint", "ulx_blind")
		hook.Remove("HUDPaintBackground", "ulx_blind")
		hook.Remove("RenderScreenspaceEffects", "CSGOSmokeBlind")
		hook.Remove("RenderScreenspaceEffects", "TFA_CSGO_FLASHBANG")
	end
end)

hook.Add("HUDShouldDraw", vars["hookname"], function(n)
	if n == "CHudDamageIndicator" then
		return false
	end
end)

hook.Add("CreateMove", vars["hookname"], function(cmd)
	if meta_cd.CommandNumber(cmd) == 0 then
		return
	end

	local mvtyp =  meta_en.GetMoveType(LocalPlayer())

	if vars["followbot"] and meta_cd.KeyDown(cmd, IN_RELOAD) and mvtyp ~= MOVETYPE_LADDER and mvtyp ~= MOVETYPE_NOCLIP and mvtyp ~= MOVETYPE_OBSERVER then
		local tply = vars["followtarg"]
		
		if vEnt(tply) then
			if meta_cd.KeyDown(cmd, IN_FORWARD) or meta_cd.KeyDown(cmd, IN_BACK) or meta_cd.KeyDown(cmd, IN_MOVELEFT) or meta_cd.KeyDown(cmd, IN_MOVERIGHT) then
				vars["following"] = false
				
				return
			end
		
			local ontop = meta_en.GetGroundEntity(LocalPlayer()) == tply
			local tpos =  meta_en.GetPos(tply)
			local lpos = meta_en.GetPos(LocalPlayer())
			
			local lang
			
			if ontop or not vars["following"] then
				lang = meta_cd.GetViewAngles(cmd)
				vars["followang"] = lang
				
				vars["following"] = true
			else
				lang = vars["followang"]
			end

			local lposnz = Vector(lpos.x, lpos.y, 0)
			local tposnz = Vector(tpos.x, tpos.y, 0)

			local max = meta_pl.GetRunSpeed(LocalPlayer()) * 1000
			local dir = tpos - lpos
			local dis = meta_vc.Distance(lposnz, tposnz)
			local mvec = Vector(dir.x, dir.y, 0)
			local ang = meta_vc.Angle(mvec)

			local yaw = math.rad(ang.y - lang.y)

			if not meta_cd.KeyDown(cmd, IN_SPEED) and not meta_pl.Crouching(tply) then
				meta_cd.SetButtons(cmd, meta_cd.GetButtons(cmd) + IN_SPEED)
			end
	
			if ontop then
				meta_cd.SetForwardMove(cmd, math.cos(yaw) * max)
			end
			
			meta_cd.SetSideMove(cmd, (0 - math.sin(yaw)) * max)
		else
			vars["followtarg"] = getClosest()
		end
	else
		vars["followtarg"] = nil
		vars["following"] = false
		vars["followang"] = Angle(0, 0, 0)
	end
end)

hook.Add("CalcView", vars["hookname"], function(ply, pos, ang, fov, zn, zf)
	if not meta_en.IsValid(ply) then
		return
	end

	local v = meta_pl.GetVehicle(ply)
	local w = meta_pl.GetActiveWeapon(ply)

	local nfov = math.Clamp(fov + (vars["cfov"] - meta_cv.GetInt(GetConVar("fov_desired"))), 2, 179)
	
	vars["afov"] = nfov

	if vars["thirdpersonfix"] then
		if meta_pl.ShouldDrawLocalPlayer(ply) then
			pos = pos + (meta_an.Forward(ang) * -150)
		end
	end

	local nview = {
		origin = pos,
		angles = ang,
		fov = nfov,
		zneaf = zn,
		zfar = zf
	}

	if meta_en.IsValid(v) then
		return hook.Run("CalcVehicleView", v, ply, nview)
	end

	if meta_en.IsValid(w) then
		local wcv = w.CalcView

		if wcv then
			nview.origin, nview.angles, nview.fov = wcv(w, ply, pos * 1, ang * 1, fov)
			
			if nview.fov ~= nfov then
				vars["afov"] = nview.fov
			end
		end
	end

	return nview
end)

hook.Add("CalcViewModelView", vars["hookname"], function(wep, vm, opos, oang, pos, ang)
	if not ismeth or not mutil or not vars["silentviz"] then
		return
	end

	local at = mutil.GetAimbotTarget()

	if at ~= 0 then
		local ent = ents.GetByIndex(at)
		
		if IsValid(ent) and meta_pl.Alive(ent) then
			local npos = meta_en.LocalToWorld(ent, meta_en.OBBCenter(ent)) - meta_en.EyePos(LocalPlayer())
			
			return pos, npos:Angle()
		end
	end
end)

hook.Add("Think", vars["hookname"], function()
	if vars["antigag"] then
		hook.Remove("PlayerCanHearPlayersVoice", "ULXGag")
		hook.Remove("PlayerBindPress", "ULXGagForce")
		hook.Remove("PlayerAuthed", "ULXCC_SetPGagData")
		timer.Remove("GagLocalPlayer")

		meta_en.SetNWBool(LocalPlayer(), "Muted", false)

		if ulx and ulx["gagUser"] then
			ulx["gagUser"](false)
		end
	end

	if vars["rgb"] then
		local rgc = HSVToColor(UnPredictedCurTime() % 6 * 60, 1, 1)

		meta_pl.SetWeaponColor(LocalPlayer(), Vector(rgc.r / 255, rgc.g / 255, rgc.b / 255))
		meta_pl.SetPlayerColor(LocalPlayer(), Vector(rgc.r / 255, rgc.g / 255, rgc.b / 255))
	else
		local wccv = GetConVar("cl_weaponcolor") or nil
		local pccv = GetConVar("cl_playercolor") or nil
		
		local wc, pc
		
		if wccv then
			wc = string.Split(meta_cv.GetString(wccv), " ")
			meta_pl.SetWeaponColor(LocalPlayer(), Vector(wc[1], wc[2], wc[3]))
		else
			meta_pl.SetWeaponColor(LocalPlayer(), Vector(1, 1, 1))
		end
		
		if pccv then
			pc = string.Split(meta_cv.GetString(pccv), " ")
			meta_pl.SetPlayerColor(LocalPlayer(), Vector(pc[1], pc[2], pc[3]))
		else
			meta_pl.SetPlayerColor(LocalPlayer(), Vector(1, 1, 1))
		end
	end
end)

hook.Add("SetupSkyboxFog", vars["hookname"], function()
	local f = vars["fog"]

	if not f then
		render.FogMode(MATERIAL_FOG_NONE)
		render.FogStart(0)
		render.FogEnd(1)
		render.FogMaxDensity(0)

		if meta_en.WaterLevel(LocalPlayer()) == 3 then
			render.SetLightingMode(1)
		else
			if not vars["fullbright"] then
				render.SetLightingMode(0)
			end
		end
	end

	return not f
end)

hook.Add("SetupWorldFog", vars["hookname"], function()
	local f = vars["fog"]

	if not f then
		render.FogMode(MATERIAL_FOG_NONE)
		render.FogStart(0)
		render.FogEnd(1)
		render.FogMaxDensity(0)

		if meta_en.WaterLevel(LocalPlayer()) == 3 then
			render.SetLightingMode(1)
		else
			if not vars["fullbright"] then
				render.SetLightingMode(0)
			end
		end
	end

	return not f
end)

hook.Add("PrePlayerDraw", vars["hookname"], function(ply)
	if vars["fullbright"] then
		render.SetLightingMode(1)
	else
		render.SetLightingMode(0)
	end
end)

hook.Add("PostPlayerDraw", vars["hookname"], function(ply)
	if vars["fullbright"] then
		render.SetLightingMode(1)
	else
		render.SetLightingMode(0)
	end
end)

hook.Add("RenderScene", vars["hookname"], function()
	if vars["fog"] then
		MATERIAL_FOG_LINEAR = 1
		MATERIAL_FOG_LINEAR_BELOW_FOG_Z	= 2
	else
		MATERIAL_FOG_LINEAR = 0
		MATERIAL_FOG_LINEAR_BELOW_FOG_Z	= 0
	end

	if vars["fullbright"] then
		render.SuppressEngineLighting(false)
		render.ResetModelLighting(1, 1, 1)

		render.SetLightingMode(1)
	else
		render.SetLightingMode(0)
	end
	
	if not ismeth then
		if not vars["tracers_other"] and not vars["tracers_local"] then
			return
		end
	
		for k, v in ipairs(bullets) do
			if not k or not v then
				continue
			end
	
			if vars["beamtracers"] then
				render.SetMaterial(beammat)
				render.DrawBeam(bullets[k].s, bullets[k].e, 4, 1, 1, Color(255, 255, 255, 255))
			else
				render.DrawLine(bullets[k].s, bullets[k].e, bullets[k].c, true)
			end
		end
	end
end)

hook.Add("PreDrawViewModel", vars["hookname"], function(vm)
	if not vm then
		return
	end

	render.SetLightingMode(0)

	if vars["fullbright"] then
		render.SuppressEngineLighting(true)
	else
		render.SuppressEngineLighting(false)
	end
end)

hook.Add('PostDrawViewModel', vars["hookname"], function(vm)
	if not vm then
		return
	end

	render.SetLightingMode(0)

	if vars["fullbright"] then
		render.SuppressEngineLighting(true)
	else
		render.SuppressEngineLighting(false)
	end
end)

hook.Add("PreDrawEffects", vars["hookname"], function()
	render.SetLightingMode(0)
end)

hook.Add("PostDrawEffects", vars["hookname"], function()
	render.SetLightingMode(0)
end)

hook.Add("DoAnimationEvent", vars["hookname"], function(ply, event, data)
	if not (event == PLAYERANIMEVENT_ATTACK_PRIMARY and data == PLAYERANIMEVENT_ATTACK_PRIMARY) then
		return
	end

	local en = vars["tracers_other"]
	local len = vars["tracers_local"]

	if (not en and not len) or not meta_en.IsValid(ply) or not meta_pl.Alive(ply) or isBadWeapon(meta_pl.GetActiveWeapon(ply)) then
		return
	end

	local isloc = ply == LocalPlayer()

	if isloc then
		if not len then
			return
		end
	else
		if not en then
			return
		end
	end

	if table.Count(bullets) > vars["maxtracers"] then
		table.remove(bullets, 1)
	end

	local usebones = true
	local startpos = meta_pl.GetShootPos(ply)
	local dir = meta_an.Forward(meta_en.EyeAngles(ply))
	local col = Color(255, 100, 100, 255)

	if isloc then
		col = Color(100, 255, 100, 255)

		if not meta_pl.ShouldDrawLocalPlayer(LocalPlayer()) then
			usebones = false
		end

		if ismeth and mutil then
			local at = mutil.GetAimbotTarget()
		
			if at ~= 0 then
				local ent = ents.GetByIndex(at)
				
				if IsValid(ent) and meta_pl.Alive(ent) then
					dir = meta_en.LocalToWorld(ent, meta_en.OBBCenter(ent)) - startpos
				end
			end
		end
	end

	if usebones then
		for i = 0, meta_en.GetBoneCount(ply) - 1 do
			if string.find(string.lower(meta_en.GetBoneName(ply, i)), "head") then
				startpos = meta_vm.GetTranslation(meta_en.GetBoneMatrix(ply, i)) + (dir * 2)
	
				break
			end
		end
	end

	local tr = util.TraceLine({
		start = startpos,
		endpos = startpos + (dir * 32767),
		filter = ply,
		ignoreworld = false,
		mask = MASK_SHOT,
	})

	table.insert(bullets, {
		["s"] = startpos,
		["e"] = tr.HitPos,
		["c"] = col,
	})

	local ttr = bullets[table.Count(bullets)]

	timer.Simple(vars["tracerlife"], function()
		table.RemoveByValue(bullets, ttr)
	end)
end)

--[[
	The rest
]]

for j, l in pairs(concommands) do
	if not j or not l then
		continue
	end

	if not type(l) == "table" then
		continue
	end

	for k, v in pairs(l) do
		local function confunc() return end

		if j == "integer" then
			confunc = function(p, c, args)
				local new = args[1]
			
				if not new then
					new = 1
				end
				
				if not type(new) == "number" then
					new = tonumber(new)
				end

				vars[v] = math.floor(new)
			end
		elseif j == "string" then
			confunc = function(p, c, args, argstr)
				if not argstr then
					argstr = "nil"
				end

				vars[v] = argstr
			end
		elseif j == "boolean" then
			confunc = function(p, c, args)
				local new = args[1]
			
				if not new then
					new = false
				end

				vars[v] = tobool(new)
			end
		else
			continue
		end

		concommand.Add(k, confunc, nil, nil, 0)
		table.insert(addedCommands, k)
	end
end

timer.Create(vars["timer_fast"], 0.1, 0, function()
	if vars["gesture_loop"] then
		safefuncs.rcon("act", vars["gesture"])
	end
end)

timer.Create(vars["timer_slow"], 1, 0, function()
	local td = vars["tdetector"]
	local sd = vars["specdetector"]
	local ps = vars["psays"]
	local force = false
	local forced = false

	if td then
		if GAMEMODE.round_state == ROUND_ACTIVE then
			safefuncs.tempty(vars["ttable"])
			
			local mp = GetConVar("ttt_minimum_players")
			
			if mp and meta_cv.GetInt(mp) == player.GetCount() then
				if (meta_pl.IsTraitor and not meta_pl.IsTraitor(LocalPlayer())) or (meta_pl.IsDetective and meta_pl.IsDetective(LocalPlayer())) then
					force = true
				end
			end
		else
			safefuncs.tempty(vars["ttable"])
			safefuncs.tempty(vars["tcache"])
		end
	end

	if td or sd or ps then
		for _, v in ipairs(player.GetAll()) do
			local skip = false
		
			if td and GAMEMODE.round_state == ROUND_ACTIVE then
				if v == LocalPlayer() or not meta_en.IsValid(v) or not meta_pl.Alive(v) then
					skip = true
				end
				
				if meta_pl.IsTerror and not meta_pl.IsTerror(v) then
					skip = true
				end
					
				local insd = false
				local ins = {v, 0}
				
				if not skip and force and not forced then
					table.insert(vars["ttable"], ins)
					
					if not table.HasValue(vars["tcache"], v) then
						table.insert(vars["tcache"], v)
					end
					
					forced = true
					insd = true
				elseif forced then
					skip = true
				end
				
				if not skip then
					if not insd and meta_pl.IsDetective and meta_pl.IsDetective(v) then
						ins[2] = 1
						table.insert(vars["ttable"], ins)
						
						insd = true
					end
					
					if not insd and meta_pl.IsTraitor and meta_pl.IsTraitor(v) then
						ins[2] = 2
						table.insert(vars["ttable"], ins)
						
						insd = true
						
						if not table.HasValue(vars["tcache"], v) then
							table.insert(vars["tcache"], v)
						end
					end
					
					if not insd then
						for _, w in ipairs(meta_pl.GetWeapons(v)) do
							if not w or not meta_en.IsValid(w) or insd then
								continue
							end
							
							if table.HasValue(tWeapons, meta_en.GetClass(w)) then
								ins[2] = 2
								table.insert(vars["ttable"], ins)
				
								if not table.HasValue(vars["tcache"], v) then
									table.insert(vars["tcache"], v)
								end
								
								insd = true
							end
						end
					end
					
					if not insd then
						table.insert(vars["ttable"], ins)
					end
				end
			end
			
			if sd then
				skip = false
			
				local mode = meta_pl.GetObserverMode(v)
				local targ = meta_pl.GetObserverTarget(v)
			
				if not meta_en.IsValid(v) or v == LocalPlayer() or mode == 0 then
					skip = true
				end
				
				if not vars["specdetector_all"] then
					if targ ~= LocalPlayer() then
						skip = true
					end
				end
				
				local has = table.HasValue(vars["spectators"], v)
				
				if not skip then
					if not has then
						table.insert(vars["spectators"], v)
					end
				else
					if has then
						table.RemoveByValue(vars["spectators"], v)
					end
				end
			end
			
			if ps then
				skip = false
			
				if v == LocalPlayer() or not meta_en.IsValid(v) then
					skip = true
				end
				
				if not skip then
					safefuncs.rcon("ulx", "psay", meta_pl.Name(v), vars["psays_message"])
				end
			end
		end
	end
end)

if mrend then
	mrend.PushAlert("Successfully loaded Swag Tools Beta!")
else
	surface.PlaySound("garrysmod/balloon_pop_cute.wav")

	MsgC(Color(255, 100, 100), "[$W467001Z_8374] ", Color(222, 222, 222), "Loaded Successfully!\n")
end

jit.flush()
